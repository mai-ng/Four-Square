/**
 * 
 */
package csc7327.objects;

import java.sql.Date;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

import csc7327.specifications.HasInvariant;

/**
 * The {@link CheckInTime} present the time of checkin
 * @author luongnv89
 *
 */
public class CheckInTime implements HasInvariant{
	private final DateTimeFormatter formatter = DateTimeFormat.forPattern("EEEE MMM dd HH:mm:ss Z yyyy");
	
	/**
	 * UTC time offset
	 */
	int utcTimeOffset;
	/**
	 * UTC time stamp
	 */
	Date cityTime;
	/**
	 * @param utcTimeOffset
	 * @param utcTimeStamp
	 */
	public CheckInTime(int utcTimeOffset, String utcTimeStamp) {
		this.utcTimeOffset = utcTimeOffset;
		this.cityTime = convertToCityTime(utcTimeStamp);
	}
	
	/**
	 * Get the city time of checkin
	 * @param utcTimeStampString the String represent the utc time of checkin
	 * @return the real time of checkin in the city
	 */
	private Date convertToCityTime(String utcTimeStampString){
		DateTime date = new DateTime(formatter.parseDateTime(utcTimeStampString), DateTimeZone.forOffsetHours(utcTimeOffset/60));
		System.out.println(date.toString());
		
		return date.plusMinutes(utcTimeOffset);
	}
	

	/**
	 * @return the cityTime
	 */
	public Date getCityTime() {
		return cityTime;
	}

	@Override
	public boolean invariant() {
		if(utcTimeOffset%15!=0 || utcTimeOffset<-720 ||utcTimeOffset>840){
			System.out.println("The time offset is invalid!");
			return false;
		}
		if(cityTime.getYear()<2000||cityTime.getYear()>DateTime.now().getYear()){
			System.out.println("The time checkin is invalid!");
			return false;
		}
		return true;
	}
	
}
